name: app cicd

on:
  push:
    branches: [master, beta, alpha]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [master, beta, alpha]
    paths-ignore:
      - '**.md'

jobs:

  get-version:
    runs-on: windows-latest
    outputs:
      new_release_will_be_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_notes: ${{ steps.semantic.outputs.new_release_notes }}
      effective_version: ${{ steps.effective-version.outputs.value }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Dry run semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 17.0.x
          dry_run: true
          branches: |
            [
              'master',
              {
                name: 'beta',
                prerelease: true
              },
              {
                name: 'alpha',
                prerelease: true
              }
            ]
          extra_plugins: |
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load version from package.json
        id: package-version
        uses: notiz-dev/github-action-json-property@v0.1.0
        with:
          path: 'package.json'
          prop_path: 'version'

      - name: Determine effective version
        uses: haya14busa/action-cond@v1
        id: effective-version
        with:
          cond: ${{ steps.semantic.outputs.new_release_published == 'true' }}
          if_true: ${{ steps.semantic.outputs.new_release_version }}
          if_false: ${{ steps.package-version.outputs.prop }}

  test-ez-scripts:
    runs-on: windows-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        script: ["dev", "prod", "package"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup MSBuild
        if: steps.cache.outputs.cache-hit != 'true'
        uses: microsoft/setup-msbuild@v1.0.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load yarn cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('app/yarn.lock') }}
          restore-keys: |
            yarn-${{ hashFiles('yarn.lock') }}-
            yarn-

      - name: Install yarn packages
        run: yarn install

      - name: Run ez script
        run: yarn ez:${{ matrix.script }}${{ matrix.runAppend }}
        env:
          CICD: true

      - name: Execute packaged app
        if: matrix.script == 'package'
        run: ./EveVision_v1337.0.0_Portable.exe CICD | Out-Null
        working-directory: release
        env:
          CICD: true

      - name: Upload logs
        if: success() || failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ez ${{ matrix.script }} logs
          path: ~/AppData/Roaming/EveVision/logs

  check-js-code-quality:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        if: steps.cache.outputs.cache-hit != 'true'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load linter yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: linter-yarn-${{ hashFiles('linter/yarn.lock') }}
          restore-keys: |
            linter-yarn-

      - name: Install NodeJS packages
        run: yarn lint:ci:install

      - name: Lint JS
        run: yarn lint:ci

      - name: Annotate linting results
        if: success() || failure()
        uses: ataylorme/eslint-annotate-action@1.0.4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint_report.json"

      - name: Upload ESLint report
        if: success() || failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ESLint report
          path: eslint_report.json

  check-cpp-code-quality:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

  build-flatbuffers:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
        working-directory: scripts

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Load cache
        uses: actions/cache@v1
        id: cache
        with:
          path: output/flatbuffers
          key: flatbuffers-${{ hashFiles('flatbuffers/schema/**') }}

      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: .\build-flatbuffers.ps1

      - name: Upload artifacts
        uses: actions/upload-artifact@v2-preview
        with:
          name: Flatbuffers
          path: ./output/flatbuffers

  build-main-process:
    runs-on: windows-latest
    needs:
      - get-version

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('app/yarn.lock') }}
          restore-keys: |
            yarn-${{ hashFiles('yarn.lock') }}-
            yarn-

      - name: Install yarn packages
        run: yarn install

      - name: Inject Sentry DSN for new release
        if: needs.get-version.outputs.new_release_will_be_published == 'true'
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["**/sentry.ts"]'
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Replace version in package.json
        uses: onlyutkarsh/patch-files-action@v1.0.1
        with:
          files: |
            package.json
            app/package.json
          patch-syntax: |
            = /version => "${{ needs.get-version.outputs.effective_version }}"

      - name: Build
        run: yarn build:js:prod:main

      - name: Upload artifacts
        uses: actions/upload-artifact@v2-preview
        with:
          name: Main process
          path: ./app/main-dist

      - name: Setup Sentry CLI
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        uses: mathrix-education/setup-sentry-cli@0.1.0
        with:
          version: latest
          url: https://sentry.io/
          token: ${{ secrets.SENTRY_TOKEN }} # from GitHub secrets
          organization: evevision
          project: app

      - name: Upload debug symbols to Sentry
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        run: sentry-cli upload-dif --include-sources --no-zips D:\a\evevision\evevision\

  build-renderer-process:
    runs-on: windows-latest
    needs:
      - get-version

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('app/yarn.lock') }}
          restore-keys: |
            yarn-${{ hashFiles('yarn.lock') }}-
            yarn-

      - name: Install yarn packages
        run: yarn install

      - name: Inject Sentry DSN for new release
        if: needs.get-version.outputs.new_release_will_be_published == 'true'
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["**/sentry.ts"]'
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Replace version in package.json
        uses: onlyutkarsh/patch-files-action@v1.0.1
        with:
          files: |
            package.json
            app/package.json
          patch-syntax: |
            = /version => "${{ needs.get-version.outputs.effective_version }}"
            
      - name: Build
        run: yarn build:js:prod:renderer

      - name: Upload artifacts
        uses: actions/upload-artifact@v2-preview
        with:
          name: Renderer process
          path: ./app/renderer-dist

      - name: Setup Sentry CLI
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        uses: mathrix-education/setup-sentry-cli@0.1.0
        with:
          version: latest
          url: https://sentry.io/
          token: ${{ secrets.SENTRY_TOKEN }} # from GitHub secrets
          organization: evevision
          project: app

      - name: Upload debug symbols to Sentry
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        run: sentry-cli upload-dif --include-sources --no-zips D:\a\evevision\evevision\

  build-overlay-dll:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
        working-directory: scripts
    needs:
      - build-flatbuffers

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Download flatbuffer artifacts
        uses: actions/download-artifact@v1
        with:
          name: Flatbuffers
          path: ./output/flatbuffers

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.0

      - name: Build
        run: .\build-overlay.ps1

      - name: Upload artifacts
        uses: actions/upload-artifact@v2-preview
        with:
          name: Overlay DLL
          path: ./output/overlay

  build-native-node-module:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
        working-directory: scripts
    needs:
      - build-flatbuffers
      - get-version

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Download flatbuffer artifacts
        uses: actions/download-artifact@v1
        with:
          name: Flatbuffers
          path: ./output/flatbuffers

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('app/yarn.lock') }}
          restore-keys: |
            yarn-${{ hashFiles('yarn.lock') }}-
            yarn-

      - name: Install yarn packages
        run: yarn install

      - name: Build
        run: yarn build:cpp:native-node

      - name: Upload artifacts
        uses: actions/upload-artifact@v2-preview
        with:
          name: Native node module
          path: ./build

      - name: Setup Sentry CLI
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        uses: mathrix-education/setup-sentry-cli@0.1.0
        with:
          version: latest
          url: https://sentry.io/
          token: ${{ secrets.SENTRY_TOKEN }} # from GitHub secrets
          organization: evevision
          project: app

      - name: Upload debug symbols to Sentry
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        run: sentry-cli upload-dif --include-sources --no-zips D:\a\evevision\evevision\

  package-app:
    runs-on: windows-latest
    needs:
      - get-version
      - build-main-process
      - build-renderer-process
      - build-overlay-dll
      - build-native-node-module

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('app/yarn.lock') }}
          restore-keys: |
            yarn-${{ hashFiles('yarn.lock') }}-
            yarn-

      - name: Install yarn packages
        run: yarn install

      - name: Build app dependencies
        run: yarn build:app-deps

      - name: Download main process artifacts
        uses: actions/download-artifact@v1
        with:
          name: Main process
          path: ./app/main-dist

      - name: Download renderer process artifacts
        uses: actions/download-artifact@v1
        with:
          name: Renderer process
          path: ./app/renderer-dist

      - name: Download overlay DLL artifacts
        uses: actions/download-artifact@v1
        with:
          name: Overlay DLL
          path: ./output/overlay

      - name: Download native node module artifacts
        uses: actions/download-artifact@v1
        with:
          name: Native node module
          path: ./build

      - name: Replace version in package.json
        uses: onlyutkarsh/patch-files-action@v1.0.1
        with:
          files: |
            package.json
            app/package.json
          patch-syntax: |
            = /version => "${{ needs.get-version.outputs.effective_version }}"

      - name: Package
        run: yarn package

      - name: Upload portable EXE artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: Portable EXE
          path: ./release/EveVision_v${{ needs.get-version.outputs.effective_version }}_Portable.exe

      - name: Upload installer artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: Installer
          path: ./release/EveVision_v${{ needs.get-version.outputs.effective_version }}_Installer.exe

      - name: Setup Sentry CLI
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        uses: mathrix-education/setup-sentry-cli@0.1.0
        with:
          version: latest
          url: https://sentry.io/
          token: ${{ secrets.SENTRY_TOKEN }} # from GitHub secrets
          organization: evevision
          project: app

      - name: Upload debug symbols to Sentry
        if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true'
        run: sentry-cli upload-dif --include-sources --no-zips D:\a\evevision\evevision\

  test-portable-exe:
    runs-on: windows-latest
    needs:
      - package-app
      - get-version

    steps:
      - name: Download portable EXE artifact
        uses: actions/download-artifact@v1
        with:
          name: Portable EXE
          path: ./release

      - name: Run CICD test on packaged app
        run: ./EveVision_v${{ needs.get-version.outputs.effective_version }}_Portable.exe CICD | Out-Null
        working-directory: release
        env:
          CICD: true

      - name: Upload logs
        if: success() || failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: Packaged app test logs
          path: ~/AppData/Roaming/EveVision/logs

  create-sentry-release:
    if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true' && !contains(github.event.head_commit.message, 'skip ci')
    runs-on: windows-latest
    needs:
      - test-ez-scripts
      - check-js-code-quality
      - check-cpp-code-quality
      - test-portable-exe
      - get-version

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Download main process artifacts
        uses: actions/download-artifact@v1
        with:
          name: Main process
          path: ./app/main-dist

      - name: Download renderer process artifacts
        uses: actions/download-artifact@v1
        with:
          name: Renderer process
          path: ./app/renderer-dist

      - name: Download native node module artifacts
        uses: actions/download-artifact@v1
        with:
          name: Native node module
          path: ./build

      - name: Setup Sentry CLI
        uses: mathrix-education/setup-sentry-cli@0.1.0
        with:
          version: latest
          url: https://sentry.io/
          token: ${{ secrets.SENTRY_TOKEN }} # from GitHub secrets
          organization: evevision
          project: app

      - name: Create release
        run: sentry-cli releases new v${{ needs.get-version.outputs.new_release_version }}

      - name: Upload sourcemaps
        run: sentry-cli releases files v${{ needs.get-version.outputs.new_release_version }} upload-sourcemaps -u ~/app ./app

      - name: Set commit for release
        run: sentry-cli releases set-commits v${{ needs.get-version.outputs.new_release_version }} --auto

      - name: Finalize release
        run: sentry-cli releases finalize v${{ needs.get-version.outputs.new_release_version }}

  release-app:
    if: github.event_name == 'push' && needs.get-version.outputs.new_release_will_be_published == 'true' && !contains(github.event.head_commit.message, 'skip ci')
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.parse-latest-release.outputs.upload_url }}
    needs:
      - test-ez-scripts
      - check-js-code-quality
      - check-cpp-code-quality
      - test-portable-exe
      - get-version

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install GPG keys
        shell: bash
        run: |
          echo '${{ secrets.AURA_BOT_GPG_KEY }}' | base64 -d | gpg --batch --yes --import
          git config commit.gpgsign true
          git config --global user.signingkey ${{ secrets.AURA_BOT_GPG_KEY_ID }}
          git config --global user.name "Aura"
          git config --global user.email "dubs+bot@eve.vision"

      - name: Finalize semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          dry_run: false
          extra_plugins: |
            @semantic-release/git
        env:
          GIT_AUTHOR_NAME: Aura
          GIT_AUTHOR_EMAIL: dubs+bot@eve.vision
          GIT_COMMITTER_NAME: Aura
          GIT_COMMITTER_EMAIL: dubs+bot@eve.vision
          GIT_EMAIL: dubs+bot@eve.vision
          GIT_USERNAME: aura-bot
          GITHUB_TOKEN: ${{ secrets.AURA_BOT_TOKEN }}

      - name: Get release made by semantic-release
        uses: octokit/request-action@v2.x
        id: latest-release
        with:
          route: GET /repos/:repository/releases/tags/v${{ steps.semantic.outputs.new_release_version }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get upload URL
        id: parse-latest-release
        uses: gr2m/get-json-paths-action@v1.x
        with:
          json: ${{ steps.latest-release.outputs.data }}
          upload_url: upload_url

  publish-app:
    if: github.event_name == 'push'
    runs-on: windows-latest
    needs:
      - release-app
      - create-sentry-release
      - get-version

    steps:
      - name: Download portable artifact
        uses: actions/download-artifact@v1
        with:
          name: Portable EXE
          path: ./release

      - name: Download installer artifact
        uses: actions/download-artifact@v1
        with:
          name: Installer
          path: ./release

      - name: Upload portable EXE to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-app.outputs.upload_url }}
          asset_path: ./release/EveVision_v${{ needs.get-version.outputs.effective_version }}_Portable.exe
          asset_name: EveVision_v${{ needs.get-version.outputs.effective_version }}_Portable.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload installer to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-app.outputs.upload_url }}
          asset_path: ./release/EveVision_v${{ needs.get-version.outputs.effective_version }}_Installer.exe
          asset_name: EveVision_v${{ needs.get-version.outputs.effective_version }}_Installer.exe
          asset_content_type: application/octet-stream

      - name: Notify discord of new release
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: v${{ needs.get-version.outputs.new_release_version }} has been released.
          details: ${{ needs.get-version.outputs.new_release_notes }}
          footer: ${{ github.sha }} Run ${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
